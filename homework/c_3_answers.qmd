---
title: "Control 3, respuestas"
subtitle: |
  | Web Scraping y acceso a datos desde la web
author: "Cristián Ayala"
execute: 
  warning: false 
  messages: false
lang: 'es'
format:
  pdf: 
    number-sections: true
    keep-tex: true
    fontsize: '10pt'
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
suppressPackageStartupMessages(library(tidyverse))
library(spotifyr)
library(tinytable)
```

Ponderación

:   20% de la nota final del curso

Formato

:   Desarrollar esta tarea con [Quarto](https://quarto.org/docs/get-started/hello/rstudio.html) o [Rmarkdown](https://rmarkdown.rstudio.com/lesson-1.html) generando un `.pdf`, agregando comentarios cuando sea necesario.

# Objetivo:

Interesa indagar sobre parecidos y diferencias en el gusto musical en Chile, Perú y Argentina además de ver su relación con las canciones más escuchadas a nivel global. Para ello, analizaremos las listas semanales de canciones de Spotify, usando el paquete [spotifyr](https://www.rcharlie.com/spotifyr/).

Las listas de canciones más escuchadas desde donde obtendremos la información son las siguientes:

-   [Top Global](https://open.spotify.com/playlist/37i9dQZEVXbNG2KDcFcKOF)
-   [Top Argentina](https://open.spotify.com/playlist/37i9dQZEVXbKPTKrnFPD0G)
-   [Top Chile](https://open.spotify.com/playlist/37i9dQZEVXbLJ0paT1JkgZ)
-   [Top Colombia](https://open.spotify.com/playlist/37i9dQZEVXbOa2lmxNORXQ)
-   [Top Perú](https://open.spotify.com/playlist/37i9dQZEVXbMGcjiWgg253)

Para este análisis será necesario tener o crear una cuenta en Spotify para obtener [credenciales de desarrollador](https://developer.spotify.com/dashboard) y acceder a su API.

# Tareas:

## Captura de datos

1)  Obtener y mostrar el listado de las 50 canciones en cada lista.

Genero una lista con los `id` de las playlists a capturar y luego itero sobre ellas para obtener la información requerida.
La función `f_get_playlist` lee la playlist y manipula la respuesta de Spotify para generar una data.frame con los tracks más el número de seguidores y el nombre de la lista.

```{r}
#| cache: true
l_listas_id <- c(Global    = '37i9dQZEVXbNG2KDcFcKOF', 
                 Argentina = '37i9dQZEVXbKPTKrnFPD0G',
                 Chile     = '37i9dQZEVXbLJ0paT1JkgZ',
                 Colombia  = '37i9dQZEVXbOa2lmxNORXQ',
                 Perú      = '37i9dQZEVXbMGcjiWgg253')

f_get_playlist <- function(.playlist_id,
                           .names){
  
  # Captura de datos desde la API de Spotify.
  l_playlist <- spotifyr::get_playlist(.playlist_id)

  # Mensaje para ver el avance de la captura.
  print(l_playlist$description)
  
  l_playlist$tracks$items |>
    add_column(followers = l_playlist$followers$total, # Agrego seguidores de la lista-
               nombre_lista = .names, # Agrego el nombre de la lista según l_listas_id.
               .before = 1)
}

l_tracks <- map2(l_listas_id, names(l_listas_id), 
                 f_get_playlist)

df_tracks <- l_tracks |> 
  list_rbind()
```

Orden de listas para que "Global" quede primero. Variable `nombre_lista` como factor.

```{r}
df_tracks <- df_tracks |> 
  mutate(nombre_lista = fct_relevel(nombre_lista, 'Global'))
```

Número de seguidores de cada lista es una constate que se repite en cada canción. 
Confirmamos que cada lista tiene 50 canciones.

```{r}
count(df_tracks, 
      nombre_lista, followers, name = 'n_canciones')
```

Listado de las canciones según lista se muestra en @tbl-canciones-lista.

```{r}
#| label: tbl-canciones-lista
# tbl-cap: 'Canciones por lista'

f_tabla <- function(x){
  tt(x, 
     theme = 'bootstrap') |> 
    format_tt(escape = TRUE) |> 
    style_tt(fontsize = .7) |> 
    style_tt(i = 0, # Header de la tabla.
             fontsize = .8)
}

df_tracks |> 
  summarise(canciones = str_c(track.name, 
                              collapse = ' - '),
            .by = nombre_lista) |> 
  f_tabla() |> 
  style_tt(align = 'l',
           tabularray_inner = "column{2} = {wd=12cm}")
```


## Canciones

2)  Mostrar una tabla en que se muestren las 10 canciones más repetidas.

```{r}
df_tracks_populares <- df_tracks |> 
  count(track.name,
        track.artists, track.album.name, track.popularity) |> 
  filter(n > 3) |> 
  mutate(track.artists = map(track.artists, 'name'),
         track.artists = map_chr(track.artists, 
                                 \(t) paste0(t, collapse = ', '))) |> 
  arrange(-track.popularity)

n_tracks_populares <- nrow(df_tracks_populares)
```

La @tbl-canciones-repetidas muestra todas las canciones que están presentes en al menos 4 de listas analizadas. 
En total son `r n_tracks_populares` canciones.

```{r}
#| label: tbl-canciones-repetidas
#| tbl-cap: 'Canciones repetidas en las cuatro listas estudiadas'
#| 
df_tracks_populares |> 
  f_tabla() |> 
  style_tt(align = 'lllrr',
           tabularray_inner = "column{1-3} = {wd=3.8cm}")
```


## Artistas

3)  Mostrar una tabla en que se muestren los 10 artistas más mencionados en cada lista.

```{r}
df_artists <- df_tracks |> 
  unnest(track.artists) |>
  count(Artista = name, nombre_lista) |> 
  add_count(Artista, 
            wt = n, name = 'Total',
            sort = TRUE) |> 
  pivot_wider(names_from = nombre_lista,
              values_from = n, 
              values_fill = 0)

name_artista_mas_mencionado <- df_artists[1, 'Artista'][[1]]
```

La @tbl-artistas-repetidos muestra a los 10 artistas con mayor presencia en las listas en estudio. 
Pueden ser mencionados como solistas o en trabajo conjunto con otros. 
El cantante con mayor presencia es **`r name_artista_mas_mencionado`**.

```{r}
#| label: tbl-artistas-repetidos
#| tbl-cap: 'Artistas repetidos en las cuatro listas estudiadas'
 
df_artists |> 
  head(10) |> 
  f_tabla() |> 
  style_tt(align = 'lrrrrrr')
```


## Análisis de las canciones

4)  Revisando lo visto en [clases](../slides/class_9/class_9.html#22), 
comparar las canciones de las listas respecto de sus [características acústicas](https://developer.spotify.com/documentation/web-api/reference/#/operations/get-several-audio-features): *danceability*, *energy*, *instrumentalness* y *valence*[^1].


```{r}
#| cache: true
df_tracks_af <- df_tracks |> 
  rowwise() |> 
  mutate(af = list(get_track_audio_features(track.id)))
```


```{r}
df_tracks_af_wide <- df_tracks_af |> 
  unnest_wider(af) |> 
  select(nombre_lista, track.name, danceability, energy, instrumentalness, valence)

df_tracks_af_long <- df_tracks_af_wide |> 
  pivot_longer(cols = c(danceability:last_col()),
               names_to = 'audio_feature')

df_af_listas_mean <- df_tracks_af_long |> 
  summarise(value = mean(value),
            .by = c(nombre_lista, audio_feature))
```

Obtener el promedio de esos indicadores en las 50 canciones más populares para cada lista y compárelos en un gráfico. 

Primero, la @tbl-listas-características muestra los valores promedio de las cuatro características de audio de las 50 canciones más escuchadas en las listas de interés.

```{r}
#| label: tbl-listas-características
#| tbl-cap: 'Características de audio según listas'

df_af_listas_mean |> 
  pivot_wider(names_from = audio_feature, 
              values_from = value,
              values_fn = ~round(., 3)) |> 
  f_tabla() |> 
  style_tt(align = 'lrrrr')
```

  El gráfico en el que se compara la media de atributos para las listas se muestra en la @fig-listas-media.
  
```{r}
#| label: fig-listas-media
#| fig-cap: 'Comparación en la media de las características de audio según listas'

# Asigno como theme_minimal a todos los gráficos posteriores. 
# También cambio las características del título y subtitulo para que acepte markdown.
theme_set(
  theme_minimal() +
    theme(plot.title = ggtext::element_markdown(),
          plot.subtitle = ggtext::element_markdown(),
          plot.title.position = 'plot')
)

rango <- function(x) {
  data.frame(list(ymin = min(x),
                  ymax = max(x)))
}

ggplot(df_af_listas_mean,
       aes(x = value,
           y = fct_reorder(audio_feature, value, mean))) +
  stat_summary(geom = 'linerange',
               fun.data = rango) +
  geom_tile(aes(fill = nombre_lista),
            height = 0.5,
            width = 0.015,
            alpha = 0.7) + 
  scale_x_continuous('Puntaje',
                     limits = c(0,1), 
                     labels = ~scales::number(., accuracy = 0.1)) +
  scale_fill_manual('Listas',
                    values = c(Global    = 'gray10', 
                               Argentina = '#74ACDF',
                               Chile     = '#E53935',
                               Colombia  = '#FCD116',
                               Perú     =  '#B71C1C')) +
  labs(title = '**Comparación de medias de las características de audio**',
       y = NULL) +
  theme(axis.text.y = element_text(size = rel(1.4)))
```


  ¿Hay diferencias en el gusto musical entre los 4 países y el mundo?
  
  - Los cuatro países se parecen bastante y están cerca de la lista global.
  - La lista global se distingue al estar siempre por debajo de las listas de los países latinos evaluados.
  - Dentro de latinoamérica, Argentina tiene un perfil algo diferente al resto.

  La distribución de las canciones en estas cuatro métricas se muestra en la @fig-canciones-distribucion.
  
```{r}
#| label: fig-canciones-distribucion
#| fig-cap: 'Distribución de canciones según atributos sónicos y listas'
library(ggtext)

colores = c("#082243", "#0e5385", "#fdf6e2", "#ed612d")

ggplot(df_tracks_af_long,
       aes(x = nombre_lista,
           y = value)) +
  geom_violin(fill = colores[3],
              colour = NA) +
  geom_tile(alpha = 0.2,
            width = 0.8, height = .01,
            fill = colores[2],
            colour = NA) + 
  stat_summary(geom = 'point',
               fun = median,
               shape = 5,
               colour = colores[1], size = 3) + 
  stat_summary(geom = 'point',
               fun = mean,
               alpha = .8,
               colour = colores[4], size = 4) + 
  facet_grid(cols = vars(audio_feature)) +
  scale_x_discrete(NULL, 
                   guide = guide_axis(n.dodge = 2)) +
  scale_y_continuous('Puntaje',
                     labels = ~scales::number(., accuracy = 0.1)) + 
  labs(title = 'Distribución de canciones según características de audio',
       subtitle = str_glue("Se muestra la **<span style='color:{colores[4]}'>media</span>** 
                           y **<span style='color:{colores[1]}'>mediana</span>** de cada distribución"))
```
[^1]: Estos conceptos son definidos por Spotify.
